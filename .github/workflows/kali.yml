name: Build Custom Kali Linux ISO

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Desktop environment to include (gnome, lxde, xfce, kde, cli)'
        required: true
        default: 'gnome'

jobs:
  build_iso:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Kali Linux Docker Container
        run: |
          sudo apt update
          sudo apt install -y docker.io
          sudo docker pull kalilinux/kali-rolling
        shell: bash

      - name: Run Kali Linux Commands in Docker
        run: |
          sudo docker run --name kali_build -v $PWD:/build -w /build -d kalilinux/kali-rolling tail -f /dev/null
          sudo docker exec kali_build apt update
          sudo docker exec kali_build apt install -y git live-build simple-cdd cdebootstrap curl debootstrap
          sudo docker exec kali_build wget https://kali.download/kali/pool/main/l/live-build/live-build_20230502+kali4_all.deb
          sudo docker exec kali_build wget https://kali.download/kali/pool/main/k/kali-archive-keyring/kali-archive-keyring_2024.1_all.deb
          sudo docker exec kali_build dpkg -i kali-archive-keyring*.deb
          sudo docker exec kali_build dpkg -i live-build_20230502*.deb || sudo apt -f install -y
        shell: bash

      - name: Download and Setup Kali Live Build Config
        run: |
          sudo docker exec kali_build git clone https://gitlab.com/kalilinux/build-scripts/live-build-config.git
          sudo docker exec kali_build bash -c "cd live-build-config && mkdir -p kali-config/variant-minimal"
          sudo docker exec kali_build bash -c "echo 'kali-linux-core' > live-build-config/kali-config/variant-minimal/.empty"
          sudo docker exec kali_build bash -c "echo 'kali-linux-firmware' >> live-build-config/kali-config/variant-minimal/.empty"
          sudo docker exec kali_build bash -c "echo 'kali-system-cli' >> live-build-config/kali-config/variant-minimal/.empty"
          sudo docker exec kali_build bash -c "echo 'kali-desktop-live' >> live-build-config/kali-config/variant-minimal/.empty"
        shell: bash

      - name: Clean Previous Builds
        run: |
          sudo docker exec kali_build bash -c "cd live-build-config && sudo lb clean"
          sudo docker exec kali_build rm -rf /var/cache/live/build/*
          sudo docker exec kali_build rm -rf /var/lib/live/build/*
          sudo docker exec kali_build rm -rf /var/tmp/*
        shell: bash

      - name: Configure ISO Build
        run: |
          sudo docker exec kali_build bash -c "cd live-build-config"
          sudo docker exec kali_build bash -c "ENVIRONMENT=${{ github.event.inputs.environment }}"
          sudo docker exec kali_build bash -c "
            case $ENVIRONMENT in
              gnome)
                ./build.sh --variant gnome --verbose --arch amd64
                ;;
              lxde)
                ./build.sh --variant lxde --verbose --arch amd64
                ;;
              xfce)
                ./build.sh --variant xfce --verbose --arch amd64
                ;;
              kde)
                lb config --distribution kali-rolling --desktop kde
                ;;
              cli)
                ./build.sh --variant minimal --verbose --arch amd64
                ;;
              *)
                echo 'Unknown environment: $ENVIRONMENT'
                exit 1
                ;;
            esac
          "
        shell: bash

      - name: Build the ISO
        run: |
          sudo docker exec kali_build bash -c "cd live-build-config && lb build 2>&1 | tee build.log"
        shell: bash

      - name: Check Build Status and Upload Log if Failed
        if: failure()
        run: |
          sudo docker exec kali_build bash -c "mkdir -p /build/results && mv live-build-config/build.log /build/results/"
        shell: bash

      - name: Archive the ISO
        if: success()
        run: |
          sudo docker exec kali_build bash -c "mkdir -p /build/results && mv live-build-config/images/*.iso /build/results/"
        shell: bash

      - name: Upload ISO Artifact
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: custom-kali-linux-iso
          path: results/*.iso

      - name: Upload Build Log Artifact
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: build-log
          path: results/build.log
